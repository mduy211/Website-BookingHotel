// <auto-generated />
using System;
using DataAccess.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BookingHotelDbContext))]
    partial class BookingHotelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Entities.Booking", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BookCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("CusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusCodeNavigationCusId")
                        .HasColumnType("int");

                    b.Property<bool?>("Deposit")
                        .HasColumnType("bit");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomCodeNavigationRoomId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CusCodeNavigationCusId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.HasIndex("RoomCodeNavigationRoomId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("DataAccess.Entities.Customer", b =>
                {
                    b.Property<int>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CusId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CusDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("CusEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CusId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DataAccess.Entities.Evaluate", b =>
                {
                    b.Property<int>("EId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EId"), 1L, 1);

                    b.Property<string>("CusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusCodeNavigationCusId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("EId");

                    b.HasIndex("CusCodeNavigationCusId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.ToTable("Evaluate");
                });

            modelBuilder.Entity("DataAccess.Entities.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelLevel")
                        .HasColumnType("int");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("DataAccess.Entities.Image", b =>
                {
                    b.Property<int>("ImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImgId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LangId"), 1L, 1);

                    b.Property<string>("ImgCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LangName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LangId");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("DataAccess.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"), 1L, 1);

                    b.Property<string>("LangCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LangCodeNavigationLangId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuLevel")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("MenuId");

                    b.HasIndex("LangCodeNavigationLangId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("DataAccess.Entities.New", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"), 1L, 1);

                    b.Property<int?>("CountView")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangCodeNavigationLangId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("NewsCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SumContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.HasIndex("LangCodeNavigationLangId");

                    b.HasIndex("MenuId");

                    b.ToTable("New");
                });

            modelBuilder.Entity("DataAccess.Entities.Policy", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("DataAccess.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("HotelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<string>("ImgCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomMax")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("DataAccess.Entities.SaleOff", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BeginDatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HotelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<int?>("Numbers")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.ToTable("SaleOff");
                });

            modelBuilder.Entity("DataAccess.Entities.Service", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelCodeNavigationHotelId")
                        .HasColumnType("int");

                    b.Property<string>("ImgCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.Property<string>("SCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SId");

                    b.HasIndex("HotelCodeNavigationHotelId");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DelUser")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImgCodeNavigationImgId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReadUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("WriteUser")
                        .HasColumnType("bit");

                    b.HasIndex("ImgCodeNavigationImgId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Booking", b =>
                {
                    b.HasOne("DataAccess.Entities.Customer", "CusCodeNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("CusCodeNavigationCusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelCodeNavigationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Room", "RoomCodeNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomCodeNavigationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CusCodeNavigation");

                    b.Navigation("HotelCodeNavigation");

                    b.Navigation("RoomCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Evaluate", b =>
                {
                    b.HasOne("DataAccess.Entities.Customer", "CusCodeNavigation")
                        .WithMany("Evaluates")
                        .HasForeignKey("CusCodeNavigationCusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("Evaluates")
                        .HasForeignKey("HotelCodeNavigationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CusCodeNavigation");

                    b.Navigation("HotelCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Hotel", b =>
                {
                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("Hotels")
                        .HasForeignKey("ImgCodeNavigationImgId");

                    b.Navigation("ImgCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Language", b =>
                {
                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("Languages")
                        .HasForeignKey("ImgCodeNavigationImgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Menu", b =>
                {
                    b.HasOne("DataAccess.Entities.Language", "LangCodeNavigation")
                        .WithMany("Menus")
                        .HasForeignKey("LangCodeNavigationLangId");

                    b.Navigation("LangCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.New", b =>
                {
                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("News")
                        .HasForeignKey("ImgCodeNavigationImgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Language", "LangCodeNavigation")
                        .WithMany("News")
                        .HasForeignKey("LangCodeNavigationLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Menu", "Menu")
                        .WithMany("News")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgCodeNavigation");

                    b.Navigation("LangCodeNavigation");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("DataAccess.Entities.Policy", b =>
                {
                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("Policies")
                        .HasForeignKey("HotelCodeNavigationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Room", b =>
                {
                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelCodeNavigationHotelId");

                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("ImgCodeNavigationImgId");

                    b.Navigation("HotelCodeNavigation");

                    b.Navigation("ImgCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.SaleOff", b =>
                {
                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("SaleOffs")
                        .HasForeignKey("HotelCodeNavigationHotelId");

                    b.Navigation("HotelCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Service", b =>
                {
                    b.HasOne("DataAccess.Entities.Hotel", "HotelCodeNavigation")
                        .WithMany("Services")
                        .HasForeignKey("HotelCodeNavigationHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("Services")
                        .HasForeignKey("ImgCodeNavigationImgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelCodeNavigation");

                    b.Navigation("ImgCodeNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Image", "ImgCodeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("ImgCodeNavigationImgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgCodeNavigation");
                });

            modelBuilder.Entity("DataAccess.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Evaluates");
                });

            modelBuilder.Entity("DataAccess.Entities.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Evaluates");

                    b.Navigation("Policies");

                    b.Navigation("Rooms");

                    b.Navigation("SaleOffs");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DataAccess.Entities.Image", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("Languages");

                    b.Navigation("News");

                    b.Navigation("Rooms");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.Language", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("News");
                });

            modelBuilder.Entity("DataAccess.Entities.Menu", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("DataAccess.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
